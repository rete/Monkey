  /// \file node.h
/*
 *
 * node.h header template automatically generated by a class generator
 * Creation date : mar. fï¿½vr. 21 2017
 *
 * This file is part of Monkey libraries.
 *
 * Monkey is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * Monkey is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Monkey.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @copyright Remi Ete
 */


#ifndef MONKEY_NODE_H
#define MONKEY_NODE_H

#include <string>
#include <map>
#include <utility>
#include <vector>

namespace monkey {

  class Node;

  typedef std::string                          ScalarContainer;
  typedef std::vector<Node>                    SequenceContainer;
  typedef std::map<std::string, Node>          MapContainer;
  typedef std::map<std::string, std::string>   AttributeContainer;
  typedef unsigned int                         SequenceKey;
  typedef MapContainer::key_type               MapKey;

  /**
   * Node class
   */
  class Node
  {
  public:
    enum Type { Null=0, Scalar=1, Sequence=2, Map=3 };
    static const Node &null; ///< Static null node ref

  private:
    struct NodeValue {
      ScalarContainer             m_scalar;
      SequenceContainer           m_sequence;
      MapContainer                m_map;
    };

    struct NodeModel {
      NodeValue           m_nodeValue;
      Type                m_nodeType;
    };

    typedef MapContainer::iterator iterator;
    typedef MapContainer::const_iterator const_iterator;

  public:
    Node(Type type = Node::Null);
    Node(const Node &rhs);
    template <typename T>
    Node(const T &rhs);
    ~Node(){;}

    Type type() const;

    bool isNull() const;
    bool isScalar() const;
    bool isSequence() const;
    bool isMap() const;

    template <typename T>
    Node &operator=(const T &rhs);
    Node &operator=(const Node &rhs);
    void reset();


    // sequence interface
    template <typename T>
    void push_back(const T &rhs);
    void push_back(const Node &rhs);

    Node operator[](SequenceKey key);
    const Node operator[](SequenceKey key) const;

    // map interface
    template <typename T>
    bool insert(const MapKey &key, const T &value);
    bool insert(const MapKey &key, const Node &value);

    size_t size() const; // works also for sequence

    const_iterator begin() const;
    iterator begin();
    const_iterator end() const;
    iterator end();

    const Node &operator[](const MapKey &key) const;

    bool remove(const MapKey &key);


    // scalar interface
    template <typename T>
    bool set(const T &rhs);

    template <typename T>
    T as() const;
    template <typename T>
    T as(const T &fallback) const;

    std::string scalar() const;

  private:
    void changeTo(Type type) const;

  private:
    mutable NodeModel      m_nodeModel;
  };

  template <>
  inline bool Node::set(const std::string &rhs)
  {
    if(this->type() != Node::Scalar)
      this->changeTo(Node::Scalar);

    m_nodeModel.m_nodeValue.m_scalar = rhs;
    return true;
  }
}

#endif  //  MONKEY_NODE_H
