  /// \file impl/node.h
/*
 *
 * impl/node.h header template automatically generated by a class generator
 * Creation date : mar. fï¿½vr. 21 2017
 *
 * This file is part of Monkey libraries.
 *
 * Monkey is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * Monkey is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Monkey.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @copyright Remi Ete
 */


#ifndef MONKEY_NODE_IMPL_H
#define MONKEY_NODE_IMPL_H

#include <string>
#include <map>
#include <utility>
#include <vector>

#include <monkey/node.h>
#include <monkey/convert.h>

namespace monkey {

  template <typename T>
  inline Node::Node(const T &rhs)
  {
    convert<T>::encode(*this, rhs);
  }

  template <typename T>
  inline T Node::as() const
  {
    T t;
    if(!convert<T>::decode(*this, t))
      throw; // TODO implement exceptions
    return std::move(t);
  }

  template <typename T>
  inline T Node::as(const T &fallback) const
  {
    T t;
    if(!convert<T>::decode(*this, t))
      return fallback;
    return std::move(t);
  }

  template <typename T>
  inline void Node::push_back(const T &rhs)
  {
    Node node;
    convert<T>::encode(node, rhs);
    this->push_back(node);
  }

  template <typename T>
  inline bool Node::insert(const MapKey &key, const T &value)
  {
    Node node(value);
    if(node.type() == Node::Null)
      return false;
    return this->insert(key, node);
  }



  template <typename T>
  inline bool Node::set(const T &rhs)
  {
    Node node;
    convert<T>::encode(node, rhs);

    if(node.type() != Node::Scalar)
      return false;

    if(this->type() != Node::Scalar)
      this->changeTo(Node::Scalar);

    m_nodeModel.m_nodeValue.m_scalar = node.m_nodeModel.m_nodeValue.m_scalar;
    return true;
  }



  template <typename T>
  inline Node &Node::operator=(const T &rhs)
  {
    convert<T>::encode(*this, rhs);
    return *this;
  }

}

#endif  //  MONKEY_NODE_IMPL_H
